name: Interactive Agent Generator

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write

jobs:
  initial-review:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issues' && 
      contains(github.event.issue.title, '[Agent Request]')
    
    steps:
      - name: Analyze Request and Ask Questions
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = context.payload.issue.body || '';
            
            // Generate clarifying questions with Claude
            const questions = `## ü§î Let's Make This Agent Amazing!
            
            Thanks for the agent request @${context.payload.issue.user.login}! To create the best possible agent, I have a few questions:
            
            ### üéØ Core Purpose
            1. What's the #1 most important problem this agent should solve?
            2. What would success look like? How would you know the agent is working well?
            
            ### üõ†Ô∏è Capabilities Deep Dive
            3. Should this agent be **proactive** (suggests itself when relevant) or **on-demand** (only when called)?
            4. What specific files/patterns should it focus on? (e.g., \`*.test.js\`, \`src/components/\`)
            5. Are there any tools you think it definitely needs beyond what you listed?
            
            ### üß† Intelligence Features
            6. How should this agent learn and improve over time?
            7. What mistakes should it definitely avoid?
            
            ### üé® Personality & Style
            8. Any specific personality traits? (e.g., thorough, concise, encouraging)
            9. Should it use emojis? Be formal or casual?
            
            ### üìä Existing Examples
            10. Is there a similar tool/workflow you're trying to replicate or improve upon?
            
            **Reply with answers to any/all questions above, and I'll generate a world-class agent for you!**
            
            ---
            *Note: I'll also create a draft PR with my best guess, but your answers will help me make it even better.*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: questions
            });
            
            // Add labels
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['agent-request', 'needs-info']
            });

  generate-draft:
    runs-on: ubuntu-latest
    needs: initial-review
    if: success()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate High-Quality Agent Draft
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Extract basic info from issue
          ISSUE_BODY='${{ github.event.issue.body }}'
          ISSUE_NUMBER='${{ github.event.issue.number }}'
          
          # Generate agent with Claude using all available context
          cat > generate_agent.py << 'EOF'
          import os
          import json
          import requests
          
          # Call Claude to generate a sophisticated agent
          api_key = os.environ['ANTHROPIC_API_KEY']
          issue_body = os.environ.get('ISSUE_BODY', '')
          
          prompt = f"""Create a world-class Claude Code agent based on this request:
          
          {issue_body}
          
          Requirements:
          1. Give it a memorable personality and name
          2. Include sophisticated self-improvement mechanisms:
             - Pattern recognition from usage
             - Learning from failures
             - Adapting to user preferences
             - Performance optimization over time
          3. Add creative capabilities beyond the basic request
          4. Include comprehensive examples
          5. Make the description compelling and clear
          6. Choose tools wisely - only what's truly needed
          7. Add error handling and edge case consideration
          
          Output a complete agent markdown file that would impress developers.
          Make it production-ready and delightful to use."""
          
          response = requests.post(
              "https://api.anthropic.com/v1/messages",
              headers={
                  "x-api-key": api_key,
                  "anthropic-version": "2023-06-01",
                  "content-type": "application/json"
              },
              json={
                  "model": "claude-3-5-sonnet-20241022",
                  "max_tokens": 8192,
                  "messages": [{"role": "user", "content": prompt}]
              }
          )
          
          agent_content = response.json()['content'][0]['text']
          
          # Save the agent
          with open('generated_agent.md', 'w') as f:
              f.write(agent_content)
          EOF
          
          python generate_agent.py
          
          # Extract agent name from generated content
          AGENT_NAME=$(grep -m1 "^# " generated_agent.md | sed 's/# //')
          echo "AGENT_NAME=$AGENT_NAME" >> $GITHUB_ENV
          
          # Move to proper location
          mkdir -p .claude/agents
          mv generated_agent.md ".claude/agents/${AGENT_NAME}.md"
          
      - name: Create Draft Branch
        run: |
          BRANCH_NAME="agent/${{ env.AGENT_NAME }}-${{ github.event.issue.number }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git checkout -b "$BRANCH_NAME"
          git add .claude/agents/
          git commit -m "feat: add ${{ env.AGENT_NAME }} agent (draft)
          
          Initial draft based on #${{ github.event.issue.number }}
          Awaiting user feedback for improvements"
          
          git push origin "$BRANCH_NAME"
          
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
      - name: Comment with Draft PR
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            const agentName = process.env.AGENT_NAME;
            const prUrl = `https://github.com/${{ github.repository }}/compare/main...${branchName}?quick_pull=1&title=feat:%20add%20${agentName}%20agent&body=Draft%20implementation%20of%20${agentName}%20agent%20from%20%23${{ github.event.issue.number }}`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üìù Draft Agent Created!
              
              I've created a draft implementation of your agent on branch \`${branchName}\`.
              
              [**Preview the agent implementation ‚Üí**](https://github.com/${{ github.repository }}/blob/${branchName}/.claude/agents/${agentName}.md)
              
              [**Create Draft PR ‚Üí**](${prUrl})
              
              This is a sophisticated first draft, but it will get even better with your answers to the questions above!
              
              Once you provide more details, I'll enhance the agent with:
              - More targeted capabilities
              - Better self-improvement strategies  
              - Refined personality and behavior
              - Additional edge case handling`
            });

  enhance-with-feedback:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' &&
      contains(github.event.issue.labels.*.name, 'agent-request') &&
      contains(github.event.issue.labels.*.name, 'needs-info') &&
      github.event.comment.user.login == github.event.issue.user.login
    
    steps:
      - name: Process Feedback and Enhance Agent
        uses: actions/github-script@v7
        with:
          script: |
            // Remove needs-info label
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'needs-info'
              });
            } catch (e) {}
            
            // Add enhancing label
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['enhancing']
            });
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üöÄ Enhancing Your Agent!
              
              Thanks for the additional details! I'm now enhancing the agent with your feedback to make it even better.
              
              This will take about 30 seconds...`
            });
      
      - name: Checkout and Enhance
        run: |
          # Implementation would go here to:
          # 1. Checkout the draft branch
          # 2. Read user's feedback
          # 3. Call Claude to enhance the agent
          # 4. Update the agent file
          # 5. Push changes
          # 6. Update PR description
          
          echo "Enhanced agent based on feedback"